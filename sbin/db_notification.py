#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Notification database
#  includes the user who will receive a notification
#  when a new CVE is published and matching their monitored CPE
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2014-2019  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2015-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

# Imports
import argparse
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.Config        import Configuration
from lib.DatabaseLayer import DatabaseLayer

argParser = argparse.ArgumentParser(description='Notification database management for cve-search', epilog='')
argParser.add_argument('-c', action='append', help='CPE name(s) to add (e.g. google:chrome)')
argParser.add_argument('-g', type=str, help='Name of the organization (e.g. mycompany)')
argParser.add_argument('-d', action='append', help='Destination(s) of matching CPE (mailto:foo@bar.com)')
argParser.add_argument('-a', action='store_true', default=False, help='Add a notification entry')
argParser.add_argument('-r', action='store_true', default=False, help='Remove a notification entry')
argParser.add_argument('-v', action='store_true', default=False, help='Verbose logging')
argParser.add_argument('-n', action='store_true', default=False, help='Run notification')
argParser.add_argument('-f', action='store_true', default=False, help='Flush state')
argParser.add_argument('-l', action='store_true', default=False, help='List notification entries')
args = argParser.parse_args()


def checkreq():
    if args.c is None:
        print ("You need at least one cpe or partial cpe entry (-c) \n")
        argParser.print_help()
        exit(1)
    if args.g is None:
        print ("Organization is missing (-g) \n")
        argParser.print_help()
        exit(1)

def searchcve(cpe=None):
    return False if cpe is None else DatabaseLayer().CVE.forCPE(cpe)


def updatestate(org=None, cve=None):
    if cve is None or org is None:
        return False
    for c in cve:
        r.sadd(f"s:{org}", c)


def sendnotification(org=None, cve=None):
    if org is None or cve is None:
        return False
    for destination in r.smembers(f"d:{org}"):
        for c in cve:
            print(f"notification of {c} to {destination}")

# Redis db 10 (cpe)
# Redis db 11 (notification)

# Set of notification for an organization set(d:orgname) -> notification destination
# Set of cpe value for an organization set(c:orgname) -> cpe values
# Set of organizations set(orgs) -> organisations

# Set of state notification set(s:orgs) -> CVEs
if __name__ == "__main__":
    r = Configuration.getRedisNotificationsConnection()

    if args.a and args.r and args.n and args.f and args.l:
        argParser.print_help()
        exit(1)

    if args.a:
        checkreq()
        if not r.sismember("orgs", args.g):
            if args.v:
                print(f"Organization {args.g} added.")
            r.sadd("orgs", args.g)

        for cpe in args.c:
            r.sadd(f"c:{args.g}", cpe)
            if args.v:
                print(f"{cpe} added")

        if not r.scard(f"d:{args.g}"):
            if args.g:
                for destination in args.d:
                    r.sadd(f"d:{args.g}", destination)
            else:
                print(f"destination missing for {args.g} you need at least one destination -d")
                exit(1)

    elif args.r:
        checkreq()
        for cpe in args.c:
            r.srem(f"c:{args.g}", cpe)
            if args.v:
                print(f"{cpe} removed")

        if r.scard(f"c:{args.g}") < 1:
            r.srem("orgs", args.g)
            if args.v:
                print(f"org {args.g} removed")

    elif args.n:
        for org in r.smembers("orgs"):
            if args.v:
                print(f"Notification for {org}")
            knowncve = set()
            for cpe in r.smembers(f"c:{org}"):
                if args.v:
                    print(f"CPE {cpe}")
                for cve in searchcve(cpe=cpe):
                    knowncve.add(cve['id'])
            if r.exists(f"s:{org}"):
                x = r.smembers(f"s:{org}")
                if diff := knowncve.difference(x):
                    sendnotification(org=org, cve=diff)

            updatestate(org=org, cve=knowncve)

    elif args.f:
        for org in r.smembers("orgs"):
            r.delete(f's:{org}')
            if args.v:
                print(f"State for {org} deleted")

    elif args.l:
        for org in r.smembers("orgs"):
            print (org)
            for cpe in r.smembers(f"c:{org}"):
                print(f" {cpe}")
            for destination in r.smembers(f"d:{org}"):
                print(f"->{destination}")

    else:
        argParser.print_help()
